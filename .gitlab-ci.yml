# ------------
# Docker Image
# ------------
default:
  image:
    name: registry.gitlab.com/ad_platform/perception
    entrypoint: [""]
  before_script:
    - echo "build --disk_cache=$CI_PROJECT_DIR/.cache" >> .bazelrc

cache:
  key: bazel_cache
  paths:
    - .cache/

include:
  - template: Code-Quality.gitlab-ci.yml

# ------------
# Various Jobs
# ------------
stages:
  - check-image
  - check
  - build
  - test
  - deploy
 
# ------------------
# Stage: check-image
# ------------------
docker_build:
  image: docker:stable
  stage: check-image
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    changes:
      - Dockerfile

# ------------
# Stage: check
# ------------
clang-format:
  stage: check
  script:
    - find . -regex '.*\.\(ino\|cpp\|hpp\|cc\|cxx\|h\)' -exec cat {} \; | diff -u <(find . -regex '.*\.\(ino\|cpp\|hpp\|cc\|cxx\|h\)' -exec clang-format -style=file {} -verbose \;) -

buildifier:
  stage: check
  script:
    - buildifier -v -d -r .

cppcheck:
  stage: check
  script:
    - cppcheck --template=gcc --enable=all --inconclusive --std=c++14 -I perception/**/*.h perception/**/*.cpp  > static_code_analysis.log
    - cppcheck --template=gcc --enable=all --inconclusive --std=c++14 -I perception/**/*.h perception/**/*.cpp --xml 2> static_code_analysis.xml
    - cppcheck-htmlreport --file=static_code_analysis.xml --report-dir=static_code_analysis_report --source-dir=.
  artifacts:
    name: static_code_analysis
    paths:
      - static_code_analysis_report/
      - static_code_analysis.xml
      - static_code_analysis.log
    expire_in: 7 days

# ------------
# Stage: Build
# ------------
bazel-build:
  stage: build
  script:
    - bazel build //...

doxygen:
  stage: build
  script:
    - echo "Generating Doxygen Documentation"
    - doxygen Doxyfile
  artifacts:
    paths:
      - doc
    expire_in: 1 day
  only:
    refs:
      - master

# ------------
# Stage: Test
# ------------
bazel-test:
  stage: test
  script:
    - bazel test //...  --test_output=all --cache_test_results=false --test_arg="--gtest_output=xml:/tmp/test_results.xml"
  after_script:
    - cp /tmp/test_results.xml test_results.xml
  artifacts:
    reports:
      junit: test_results.xml
    name: TestResults
    when: on_success

code-coverage:
  stage: test
  script:
    - bazel coverage -s --combined_report=lcov --coverage_report_generator=@bazel_tools//tools/test/CoverageOutputGenerator/java/com/google/devtools/coverageoutputgenerator:Main //...
    - export OUTPUT_DIR=$(bazel info execution_root)
    - export COVERAGE_INFO=$(find $OUTPUT_DIR -name coverage.dat)
    - genhtml -s --num-spaces 4 --legend --highlight --sort -t "Code Coverage" --demangle-cpp --function-coverage --branch-coverage -o coverage $COVERAGE_INFO
  coverage: /functions.*:\s(\d+.\d+%)/
  allow_failure: true
  artifacts:
    paths:
      - coverage/
    name: code-coverage
    when: on_success
    expire_in: 1 day

# -------------
# Stage: Deploy
# -------------
pages:
  stage: deploy
  dependencies:
    - code-coverage
    - cppcheck
    - doxygen
  script:
    - mkdir -p reports
    - echo "<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>Motion Planning</title> </head> <body> <ul> <li><a href="coverage/">Code Coverage Report</a></li> <li><a href="static_code_analysis_report/">Static Code Analysis Report</a></li> <li><a href="doc/html">Doxygen Documentation</a></li> </ul> </body> </html>" > reports/index.html
    - mv coverage reports/coverage
    - mv static_code_analysis_report/ reports/static_code_analysis_report
    - mv doc/ reports/doc
    - mv reports/ public
  artifacts:
    paths:
      - public
  only:
    refs:
      - master
